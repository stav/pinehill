---
import BaseHead from '@/components/BaseHead.astro';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import { SITE_TITLE } from '@/consts';
import { issues, type Comment, type Issue } from '@/data/issues';
import { getCollection, render } from 'astro:content';
import { Image } from 'astro:assets';
import { getStatusColor, getPriorityColor, getLocationColor } from '@/utils/issues';

export async function getStaticPaths() {
	return issues.map((issue: Issue) => ({
		params: { id: issue.id.toString() }
	}));
}

const { id } = Astro.params;
const issue = issues.find((issue: Issue) => issue.id === parseInt(id!));

if (!issue) {
	return Astro.redirect('/issues');
}

// Fetch blog post content if issue has a blogPostId
let blogPostContent: any = null;
if (issue.blogPostId) {
	try {
		const blogPost = await getCollection('blog', ({ id }) => id === issue.blogPostId);
		if (blogPost.length > 0) {
			const { Content } = await render(blogPost[0]);
			blogPostContent = { post: blogPost[0], Content };
		}
	} catch (error) {
		console.warn(`Blog post ${issue.blogPostId} not found for issue ${issue.id}`);
	}
}




---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`${issue.title} - ${SITE_TITLE}`} description={issue.description.substring(0, 160)} />
	</head>
	<body>
		<Header />
		<main class="min-h-screen bg-gray-50 py-8">
			<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
				<!-- Breadcrumb -->
				<nav class="mb-8">
					<a href="/issues" class="text-primary-600 hover:text-primary-700">
						← Back to Issues
					</a>
				</nav>

				<!-- Issue Details -->
				<div class="card mb-8">
					<div class="flex flex-col sm:flex-row sm:items-start justify-between mb-6">
						<div class="flex-1">
							<h1 class="text-3xl font-bold text-gray-900 mb-4">{issue.title}</h1>
							<div class="space-y-2 mb-4">
								<div class="flex items-center">
									<span class="font-medium text-gray-900 mr-2">status:</span>
									<span class={`px-2 py-1 rounded text-sm font-medium ${getStatusColor(issue.status)}`}>
										{issue.status.replace('-', ' ')}
									</span>
								</div>
								<div class="flex items-center">
									<span class="font-medium text-gray-900 mr-2">priority:</span>
									<span class={`px-2 py-1 rounded text-sm font-medium ${getPriorityColor(issue.priority)}`}>
										{issue.priority}
									</span>
								</div>
								<div class="flex items-center">
									<span class="font-medium text-gray-900 mr-2">locations:</span>
									<div class="flex gap-1">
										{issue.locations.map((location: string) => (
											<span class={`px-2 py-1 rounded text-sm font-medium ${getLocationColor(location)}`}>
												{location}
											</span>
										))}
									</div>
								</div>
							</div>
						</div>
						<div class="flex gap-2 mt-4 sm:mt-0">
							<a href="/blog/first-post/" class="btn btn-secondary">Edit</a>
							<a href="/blog/first-post/" class="btn btn-primary">Update Status</a>
						</div>
					</div>

					<div class="prose max-w-none mb-6">
						<p class="text-gray-700 whitespace-pre-line">{issue.description}</p>
					</div>

					{/* Blog Post Image */}
					{blogPostContent && blogPostContent.post.data.heroImage && (
						<div class="mb-6">
							<Image 
								width={1020} 
								height={510} 
								src={blogPostContent.post.data.heroImage} 
								alt="" 
								class="w-full h-auto rounded-lg shadow-sm"
							/>
						</div>
					)}

					{/* Blog Post Content */}
					{blogPostContent && (
						<div class="border-t border-gray-200 pt-6 mb-6">
							<div class="flex items-center mb-4">
								<h3 class="text-lg font-semibold text-gray-900">Related Blog Post</h3>
								<a href={`/blog/${blogPostContent.post.id}`} class="ml-2 text-sm text-primary-600 hover:text-primary-700">
									View full post →
								</a>
							</div>
							<div class="prose max-w-none">
								<blogPostContent.Content />
							</div>
						</div>
					)}

					<div class="border-t border-gray-200 pt-6">
						<div class="grid grid-cols-1 sm:grid-cols-2 gap-6 text-sm">
							<div>
								<span class="font-medium text-gray-900">Created by:</span>
								<span class="text-gray-600 ml-2">{issue.author}</span>
							</div>
							<div>
								<span class="font-medium text-gray-900">Assigned to:</span>
								<span class="text-gray-600 ml-2">{issue.assignedTo || 'Unassigned'}</span>
							</div>
							<div>
								<span class="font-medium text-gray-900">Created:</span>
								<span class="text-gray-600 ml-2">{issue.createdAt}</span>
							</div>
							<div>
								<span class="font-medium text-gray-900">Last updated:</span>
								<span class="text-gray-600 ml-2">{issue.updatedAt || issue.createdAt}</span>
							</div>
						</div>
					</div>
				</div>

				<!-- Comments Section -->
				<div class="card">
					<h2 class="text-xl font-semibold text-gray-900 mb-6">Comments ({issue.comments.length})</h2>
					
					<!-- Comments List -->
					<div class="space-y-6">
						{issue.comments.map((comment: Comment) => (
							<div class="border-b border-gray-200 pb-6 last:border-b-0">
								<div class="flex items-start space-x-3">
									<div class="flex-shrink-0">
										<div class="w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
											<span class="text-sm font-medium text-primary-600">
												{comment.author.split(' ').map((n: string) => n[0]).join('')}
											</span>
										</div>
									</div>
									<div class="flex-1 min-w-0">
										<div class="flex items-center space-x-2 mb-2">
											<span class="text-sm font-medium text-gray-900">{comment.author}</span>
											<span class="text-sm text-gray-500">{comment.createdAt}</span>
										</div>
										<p class="text-gray-700 mb-3">{comment.content}</p>
										
										{comment.replies.length > 0 && (
											<div class="ml-6 space-y-4">
												{comment.replies.map((reply: Comment) => (
													<div class="flex items-start space-x-3">
														<div class="flex-shrink-0">
															<div class="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center">
																<span class="text-xs font-medium text-gray-600">
																	{reply.author.split(' ').map((n: string) => n[0]).join('')}
																</span>
															</div>
														</div>
														<div class="flex-1 min-w-0">
															<div class="flex items-center space-x-2 mb-1">
																<span class="text-sm font-medium text-gray-900">{reply.author}</span>
																<span class="text-sm text-gray-500">{reply.createdAt}</span>
															</div>
															<p class="text-gray-700">{reply.content}</p>
														</div>
													</div>
												))}
											</div>
										)}
										
									</div>
								</div>
							</div>
						))}
					</div>
				</div>
			</div>
		</main>
		<Footer />
	</body>
</html> 
